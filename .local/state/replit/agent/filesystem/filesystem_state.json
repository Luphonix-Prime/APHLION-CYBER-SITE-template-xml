{"file_contents":{"create_superuser.py":{"content":"import os\nimport django\n\n# Set up Django environment\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'aphelioncyber.settings')\ndjango.setup()\n\nfrom django.contrib.auth import get_user_model\nfrom django.db import IntegrityError\n\ndef create_superuser():\n    User = get_user_model()\n    \n    try:\n        # Define superuser credentials\n        username = 'admin'\n        email = 'admin@example.com'\n        password = 'admin123'\n        \n        # Check if superuser already exists\n        if not User.objects.filter(username=username).exists():\n            # Create superuser\n            User.objects.create_superuser(\n                username=username,\n                email=email,\n                password=password\n            )\n            print(f'Superuser \"{username}\" created successfully!')\n        else:\n            print(f'Superuser \"{username}\" already exists.')\n            \n    except IntegrityError as e:\n        print(f'Error creating superuser: {e}')\n    except Exception as e:\n        print(f'Unexpected error: {e}')\n\nif __name__ == '__main__':\n    create_superuser()","size_bytes":1081},"manage.py":{"content":"#!/usr/bin/env python\n\"\"\"Django's command-line utility for administrative tasks.\"\"\"\nimport os\nimport sys\n\n\ndef main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'aphelioncyber.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n\n\nif __name__ == '__main__':\n    main()","size_bytes":534},"aphelioncyber/__init__.py":{"content":"# This file is intentionally empty\n# It is required to make the directory a Python package","size_bytes":90},"aphelioncyber/asgi.py":{"content":"\"\"\"\nASGI config for aphelioncyber project.\n\nIt exposes the ASGI callable as a module-level variable named ``application``.\n\nFor more information on this file, see\nhttps://docs.djangoproject.com/en/5.2/howto/deployment/asgi/\n\"\"\"\n\nimport os\n\nfrom django.core.asgi import get_asgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'aphelioncyber.settings')\n\napplication = get_asgi_application()","size_bytes":402},"aphelioncyber/settings.py":{"content":"\"\"\"\nDjango settings for aphelioncyber project.\n\"\"\"\n\nimport os\nfrom pathlib import Path\n\n# Build paths inside the project like this: BASE_DIR / 'subdir'.\nBASE_DIR = Path(__file__).resolve().parent.parent\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = os.environ.get('SECRET_KEY', 'django-insecure-default-key-for-development')\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n\nALLOWED_HOSTS = ['*']  # For development only, restrict this in production\n\n\n# Application definition\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n\n    'wagtail.contrib.forms',\n    'wagtail.contrib.redirects',\n    'wagtail.embeds',\n    'wagtail.sites',\n    'wagtail.users',\n    'wagtail.snippets',\n    'wagtail.documents',\n    'wagtail.images',\n    'wagtail.search',\n    'wagtail.admin',\n    'wagtail',\n    'wagtail_modeladmin',\n\n    'modelcluster',\n    'taggit',\n\n    'crispy_forms',\n    'crispy_tailwind',\n    'aphelioncyber.website',\n    'aphelioncyber.blog',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n    'wagtail.contrib.redirects.middleware.RedirectMiddleware',\n]\n\nROOT_URLCONF = 'aphelioncyber.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n                'wagtail.contrib.settings.context_processors.settings',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'aphelioncyber.wsgi.application'\n\n\n# Database\n# https://docs.djangoproject.com/en/5.2/ref/settings/#databases\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n\n\n# Password validation\n# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n\n# Internationalization\n# https://docs.djangoproject.com/en/5.2/topics/i18n/\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_TZ = True\n\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.2/howto/static-files/\n\nSTATIC_URL = 'static/'\nSTATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]\nSTATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')\n\n# Media files\nMEDIA_URL = '/media/'\nMEDIA_ROOT = os.path.join(BASE_DIR, 'media')\n\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field\n\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n\n# Crispy Forms\nCRISPY_ALLOWED_TEMPLATE_PACKS = \"tailwind\"\nCRISPY_TEMPLATE_PACK = \"tailwind\"\n\n# Wagtail settings\nWAGTAIL_SITE_NAME = \"Aphelion Cyber Blog & Events\"\n\n# Base URL to use when referring to full URLs within the Wagtail admin backend -\n# e.g. in notification emails. Don't include '/admin' or a trailing slash\nWAGTAILIMAGES_IMAGE_MODEL = 'wagtailimages.Image'\n\n# Email settings (for development)\nEMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'","size_bytes":4160},"aphelioncyber/urls.py":{"content":"\"\"\"\nURL configuration for aphelioncyber project.\n\"\"\"\n\nfrom django.contrib import admin\nfrom django.urls import path, include, re_path\nfrom django.conf import settings\nfrom django.conf.urls.static import static\n\nfrom wagtail.admin import urls as wagtailadmin_urls\nfrom wagtail import urls as wagtail_urls\nfrom wagtail.documents import urls as wagtaildocs_urls\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('cms/', include(wagtailadmin_urls)),\n    path('documents/', include(wagtaildocs_urls)),\n    path('', include('aphelioncyber.website.urls')),\n    re_path(r'', include(wagtail_urls)),\n]\n\nif settings.DEBUG:\n    urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)\n    urlpatterns += static(settings.STATIC_URL, document_root=settings.STATIC_ROOT)","size_bytes":789},"aphelioncyber/wsgi.py":{"content":"\"\"\"\nWSGI config for aphelioncyber project.\n\nIt exposes the WSGI callable as a module-level variable named ``application``.\n\nFor more information on this file, see\nhttps://docs.djangoproject.com/en/5.2/howto/deployment/wsgi/\n\"\"\"\n\nimport os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'aphelioncyber.settings')\n\napplication = get_wsgi_application()","size_bytes":402},"aphelioncyber/blog/__init__.py":{"content":"\n","size_bytes":1},"aphelioncyber/blog/admin.py":{"content":"\nfrom django.contrib import admin\nfrom .models import BlogPage, WebinarPage\n\n\n@admin.register(BlogPage)\nclass BlogPageAdmin(admin.ModelAdmin):\n    list_display = ('title', 'author', 'date', 'live')\n    list_filter = ('date', 'author', 'live')\n    search_fields = ('title', 'intro', 'body')\n    date_hierarchy = 'date'\n\n\n@admin.register(WebinarPage)\nclass WebinarPageAdmin(admin.ModelAdmin):\n    list_display = ('title', 'author', 'date', 'status', 'live')\n    list_filter = ('date', 'author', 'status', 'live')\n    search_fields = ('title', 'intro', 'description')\n    date_hierarchy = 'date'\n","size_bytes":593},"aphelioncyber/blog/apps.py":{"content":"\nfrom django.apps import AppConfig\n\n\nclass BlogConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'aphelioncyber.blog'\n","size_bytes":155},"aphelioncyber/blog/models.py":{"content":"\nfrom django.db import models\nfrom django.contrib.auth.models import User\nfrom wagtail.models import Page\nfrom wagtail.fields import RichTextField\nfrom wagtail.admin.panels import FieldPanel, MultiFieldPanel\nfrom wagtail.search import index\nfrom wagtail.images.models import Image\n\n\nclass BlogIndexPage(Page):\n    intro = RichTextField(blank=True)\n\n    content_panels = Page.content_panels + [\n        FieldPanel('intro', classname=\"full\")\n    ]\n\n    def get_context(self, request):\n        context = super().get_context(request)\n        blogpages = self.get_children().live().order_by('-first_published_at')\n        context['blogpages'] = blogpages\n        return context\n\n\nclass BlogPage(Page):\n    date = models.DateTimeField(\"Post date\")\n    author = models.ForeignKey(User, on_delete=models.CASCADE, related_name='blog_posts')\n    intro = models.CharField(max_length=250)\n    body = RichTextField(blank=True)\n    featured_image = models.ForeignKey(\n        'wagtailimages.Image',\n        null=True,\n        blank=True,\n        on_delete=models.SET_NULL,\n        related_name='+'\n    )\n    tags = models.CharField(max_length=200, blank=True, help_text=\"Comma-separated tags\")\n\n    search_fields = Page.search_fields + [\n        index.SearchField('intro'),\n        index.SearchField('body'),\n    ]\n\n    content_panels = Page.content_panels + [\n        MultiFieldPanel([\n            FieldPanel('date'),\n            FieldPanel('author'),\n            FieldPanel('tags'),\n        ], heading=\"Blog information\"),\n        FieldPanel('intro'),\n        FieldPanel('body', classname=\"full\"),\n        FieldPanel('featured_image'),\n    ]\n\n\nclass WebinarIndexPage(Page):\n    intro = RichTextField(blank=True)\n\n    content_panels = Page.content_panels + [\n        FieldPanel('intro', classname=\"full\")\n    ]\n\n    def get_context(self, request):\n        context = super().get_context(request)\n        webinarpages = self.get_children().live().order_by('-first_published_at')\n        context['webinarpages'] = webinarpages\n        return context\n\n\nclass WebinarPage(Page):\n    EVENT_STATUS_CHOICES = [\n        ('upcoming', 'Upcoming'),\n        ('live', 'Live Now'),\n        ('completed', 'Completed'),\n    ]\n\n    date = models.DateTimeField(\"Event date\")\n    author = models.ForeignKey(User, on_delete=models.CASCADE, related_name='webinar_posts')\n    intro = models.CharField(max_length=250)\n    description = RichTextField(blank=True)\n    featured_image = models.ForeignKey(\n        'wagtailimages.Image',\n        null=True,\n        blank=True,\n        on_delete=models.SET_NULL,\n        related_name='+'\n    )\n    registration_link = models.URLField(blank=True, help_text=\"Link for webinar registration\")\n    status = models.CharField(max_length=20, choices=EVENT_STATUS_CHOICES, default='upcoming')\n    duration_minutes = models.PositiveIntegerField(default=60, help_text=\"Duration in minutes\")\n    max_attendees = models.PositiveIntegerField(blank=True, null=True)\n    tags = models.CharField(max_length=200, blank=True, help_text=\"Comma-separated tags\")\n\n    search_fields = Page.search_fields + [\n        index.SearchField('intro'),\n        index.SearchField('description'),\n    ]\n\n    content_panels = Page.content_panels + [\n        MultiFieldPanel([\n            FieldPanel('date'),\n            FieldPanel('author'),\n            FieldPanel('status'),\n            FieldPanel('duration_minutes'),\n            FieldPanel('max_attendees'),\n            FieldPanel('tags'),\n        ], heading=\"Webinar information\"),\n        FieldPanel('intro'),\n        FieldPanel('description', classname=\"full\"),\n        FieldPanel('featured_image'),\n        FieldPanel('registration_link'),\n    ]\n","size_bytes":3675},"aphelioncyber/blog/wagtail_hooks.py":{"content":"\nfrom wagtail_modeladmin.options import ModelAdmin, modeladmin_register\nfrom .models import BlogPage, WebinarPage\n\n\nclass BlogPageAdmin(ModelAdmin):\n    model = BlogPage\n    menu_label = 'Blogs'\n    menu_icon = 'doc-full-inverse'\n    list_display = ('title', 'author', 'date', 'live')\n    list_filter = ('author', 'date', 'live')\n    search_fields = ('title', 'intro', 'body')\n\n\nclass WebinarPageAdmin(ModelAdmin):\n    model = WebinarPage\n    menu_label = 'Webinars'\n    menu_icon = 'media'\n    list_display = ('title', 'author', 'date', 'status', 'live')\n    list_filter = ('author', 'date', 'status', 'live')\n    search_fields = ('title', 'intro', 'description')\n\n\nmodeladmin_register(BlogPageAdmin)\nmodeladmin_register(WebinarPageAdmin)\n","size_bytes":740},"aphelioncyber/website/__init__.py":{"content":"# This file is intentionally empty\n# It is required to make the directory a Python package","size_bytes":90},"aphelioncyber/website/admin.py":{"content":"from django.contrib import admin\nfrom .models import ContactSubmission\n\n@admin.register(ContactSubmission)\nclass ContactSubmissionAdmin(admin.ModelAdmin):\n    list_display = ('name', 'email', 'company', 'created_at')\n    search_fields = ('name', 'email', 'company', 'message')\n    list_filter = ('created_at',)","size_bytes":310},"aphelioncyber/website/apps.py":{"content":"from django.apps import AppConfig\n\nclass WebsiteConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'aphelioncyber.website'","size_bytes":158},"aphelioncyber/website/forms.py":{"content":"from django import forms\nfrom .models import ContactSubmission\nfrom crispy_forms.helper import FormHelper\nfrom crispy_forms.layout import Submit, Layout, Field, Div\n\nclass ContactForm(forms.ModelForm):\n    class Meta:\n        model = ContactSubmission\n        fields = ['name', 'email', 'company', 'message']\n        widgets = {\n            'name': forms.TextInput(attrs={\n                'class': 'bg-dark border border-gray-700 rounded-lg focus:ring-2 focus:ring-secondary focus:border-secondary text-white',\n                'placeholder': 'John Doe'\n            }),\n            'email': forms.EmailInput(attrs={\n                'class': 'bg-dark border border-gray-700 rounded-lg focus:ring-2 focus:ring-secondary focus:border-secondary text-white',\n                'placeholder': 'you@example.com'\n            }),\n            'company': forms.TextInput(attrs={\n                'class': 'bg-dark border border-gray-700 rounded-lg focus:ring-2 focus:ring-secondary focus:border-secondary text-white',\n                'placeholder': 'Your Company'\n            }),\n            'message': forms.Textarea(attrs={\n                'class': 'bg-dark border border-gray-700 rounded-lg focus:ring-2 focus:ring-secondary focus:border-secondary text-white',\n                'placeholder': 'Tell us how we can help...',\n                'rows': 4\n            }),\n        }\n    \n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        self.helper = FormHelper()\n        self.helper.form_method = 'post'\n        self.helper.add_input(Submit('submit', 'Send Message', \n                                      css_class='w-full bg-secondary hover:bg-[#6e3691] text-white font-medium py-3 px-4 rounded-lg transition-colors'))\n        self.helper.layout = Layout(\n            Field('name', css_class='mb-3'),\n            Field('email', css_class='mb-3'),\n            Field('company', css_class='mb-3'),\n            Field('message', css_class='mb-3'),\n        )","size_bytes":1976},"aphelioncyber/website/models.py":{"content":"from django.db import models\n\nclass ContactSubmission(models.Model):\n    name = models.CharField(max_length=100)\n    email = models.EmailField()\n    company = models.CharField(max_length=100)\n    message = models.TextField()\n    created_at = models.DateTimeField(auto_now_add=True)\n    \n    def __str__(self):\n        return f\"{self.name} - {self.company}\"\n\n\n# Add this after the ContactSubmission model\nclass UserSubscription(models.Model):\n    user = models.ForeignKey('auth.User', on_delete=models.CASCADE)\n    subscription_type = models.CharField(max_length=50)\n    status = models.CharField(max_length=20)\n    last_active = models.DateTimeField(auto_now=True)\n    created_at = models.DateTimeField(auto_now_add=True)\n\n    def __str__(self):\n        return f\"{self.user.username} - {self.subscription_type}\"","size_bytes":811},"aphelioncyber/website/urls.py":{"content":"from django.urls import path\nfrom . import views\n\n# Add this import at the top\nfrom django.contrib.auth.views import LoginView\n\n# Update the urlpatterns list\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('platform/', views.platform, name='platform'),\n    path('managed-security/', views.managed_security, name='managed_security'),\n    path('cyber-defense/', views.cyber_defense, name='cyber_defense'),\n    path('cybersecurity-operations/', views.cybersecurity_operations, name='cybersecurity_operations'),\n    path('training-awareness/', views.training_awareness, name='training_awareness'),\n    path('pricing/', views.pricing, name='pricing'),\n    path('resources/', views.resources, name='resources'),\n    path('company/', views.company, name='company'),\n    # Update the login path to include 'accounts' prefix\n    path('accounts/login/', LoginView.as_view(template_name='website/login.html'), name='login'),\n    path('contact/', views.contact, name='contact'),\n    path('forgot-password/', views.forgot_password, name='forgot_password'),\n    path('signup/', views.signup, name='signup'),  # Add this line\n    path('security/', views.security, name='security'),\n    path('compliance/', views.compliance, name='compliance'),\n    path('addons/', views.addons, name='addons'),\n    \n    path('policy-generator/', views.policygenerator, name='policygenerator'),\n    path('export-pdf/', views.export_pdf, name='export_pdf'),\n    path('export-excel/', views.export_excel, name='export_excel'),\n    \n    # Managed Security Services subsections\n    path('incident-response/', views.incident_response, name='incident_response'),\n    path('deep-web-monitoring/', views.deep_web_monitoring, name='deep_web_monitoring'),\n    path('security-operations-center/', views.security_operations_center, name='security_operations_center'),\n    path('identity-access-management/', views.identity_access_management, name='identity_access_management'),\n    path('third-party-risk-management/', views.third_party_risk_management, name='third_party_risk_management'),\n    \n    # Cyber Defense subsections\n    path('vapt/', views.vapt, name='vapt'),\n    path('website-application-security/', views.website_application_security, name='website_application_security'),\n    path('mobile-application-security/', views.mobile_application_security, name='mobile_application_security'),\n    path('api-security-assessment/', views.api_security_assessment, name='api_security_assessment'),\n    path('wireless-device-security/', views.wireless_device_security, name='wireless_device_security'),\n    path('cloud-security-testing/', views.cloud_security_testing, name='cloud_security_testing'),\n    path('source-code-review/', views.source_code_review, name='source_code_review'),\n    path('ot-iot-security/', views.ot_iot_security, name='ot_iot_security'),\n    \n    # Governance, Risk & Compliance subsections\n    path('iso-27001/', views.iso_27001, name='iso_27001'),\n    path('hipaa/', views.hipaa, name='hipaa'),\n    path('iso-27701/', views.iso_27701, name='iso_27701'),\n    path('gdpr/', views.gdpr, name='gdpr'),\n    path('soc2/', views.soc2, name='soc2'),\n    path('dpdp/', views.dpdp, name='dpdp'),\n    path('iso-27017/', views.iso_27017, name='iso_27017'),\n    path('iso-27018/', views.iso_27018, name='iso_27018'),\n    path('it-general-control-audit/', views.it_general_control_audit, name='it_general_control_audit'),\n    path('third-party-vendor-audit/', views.third_party_vendor_audit, name='third_party_vendor_audit'),\n    \n    # Cybersecurity Operations subsections\n    path('network-architecture-review/', views.network_architecture_review, name='network_architecture_review'),\n    path('brand-exploitation/', views.brand_exploitation, name='brand_exploitation'),\n    \n    # Training & Awareness subsections\n    path('phishing-simulation/', views.phishing_simulation, name='phishing_simulation'),\n    path('employee-awareness-training/', views.employee_awareness_training, name='employee_awareness_training'),\n]","size_bytes":4008},"aphelioncyber/website/views.py":{"content":"from django.shortcuts import render, redirect\nfrom django.contrib import messages\nfrom .forms import ContactForm\nfrom django.contrib.auth.decorators import login_required\nfrom django.contrib.auth.models import User\nfrom django.http import JsonResponse\nfrom .models import UserSubscription\nfrom django.http import HttpResponse\nimport csv\nfrom reportlab.pdfgen import canvas\nfrom io import BytesIO\n\ndef home(request):\n    return render(request, 'website/home.html')\n\ndef platform(request):\n    return render(request, 'website/platform.html')\n\ndef managed_security(request):\n    return render(request, 'website/managed_security.html')\n\ndef cyber_defense(request):\n    return render(request, 'website/cyber_defense.html')\n\ndef cybersecurity_operations(request):\n    return render(request, 'website/cybersecurity_operations.html')\n\ndef training_awareness(request):\n    return render(request, 'website/training_awareness.html')\n\ndef pricing(request):\n    return render(request, 'website/pricing.html')\n\ndef resources(request):\n    from aphelioncyber.blog.models import BlogPage, WebinarPage\n    \n    # Get latest blogs and webinars\n    latest_blogs = BlogPage.objects.live().order_by('-date')[:6]\n    latest_webinars = WebinarPage.objects.live().order_by('-date')[:6]\n    \n    context = {\n        'latest_blogs': latest_blogs,\n        'latest_webinars': latest_webinars,\n    }\n    return render(request, 'website/resources.html', context)\n\ndef company(request):\n    return render(request, 'website/company.html')\n\n# Remove or comment out the existing login view\n# def login(request):\n#     return render(request, 'website/login.html')\n\n# Add these imports at the top\nfrom django.contrib.auth.views import LoginView\n\n# Add the custom login view\nclass CustomLoginView(LoginView):\n    template_name = 'website/login.html'\n    redirect_authenticated_user = True\n\ndef forgot_password(request):\n    if request.method == 'POST':\n        # Add your password reset logic here\n        # For example, send a reset email\n        messages.success(request, 'Password reset instructions have been sent to your email.')\n        return redirect('login')\n    return render(request, 'website/forgot_password.html')\n\ndef contact(request):\n    if request.method == 'POST':\n        form = ContactForm(request.POST)\n        if form.is_valid():\n            form.save()\n            messages.success(request, 'Your message has been sent. We will get back to you soon!')\n            return redirect('contact')\n    else:\n        form = ContactForm()\n    \n    return render(request, 'website/contact.html', {'form': form})\n\ndef signup(request):\n    return render(request, 'website/signup.html')\n\ndef security(request):\n    return render(request, 'website/security.html')\n\ndef compliance(request):\n    return render(request, 'website/compliance.html')\n\ndef addons(request):\n    return render(request, 'website/addons.html')\n\n\n\n# Managed Security Services subsections\ndef incident_response(request):\n    return render(request, 'website/incident_response.html')\n\ndef deep_web_monitoring(request):\n    return render(request, 'website/deep_web_monitoring.html')\n\ndef security_operations_center(request):\n    return render(request, 'website/security_operations_center.html')\n\ndef identity_access_management(request):\n    return render(request, 'website/identity_access_management.html')\n\ndef third_party_risk_management(request):\n    return render(request, 'website/third_party_risk_management.html')\n\n# Cyber Defense subsections\ndef vapt(request):\n    return render(request, 'website/vapt.html')\n\ndef website_application_security(request):\n    return render(request, 'website/website_application_security.html')\n\ndef mobile_application_security(request):\n    return render(request, 'website/mobile_application_security.html')\n\ndef api_security_assessment(request):\n    return render(request, 'website/api_security_assessment.html')\n\ndef wireless_device_security(request):\n    return render(request, 'website/wireless_device_security.html')\n\ndef cloud_security_testing(request):\n    return render(request, 'website/cloud_security_testing.html')\n\ndef source_code_review(request):\n    return render(request, 'website/source_code_review.html')\n\ndef ot_iot_security(request):\n    return render(request, 'website/ot_iot_security.html')\n\n# Governance, Risk & Compliance subsections\ndef iso_27001(request):\n    return render(request, 'website/iso_27001.html')\n\ndef hipaa(request):\n    return render(request, 'website/hipaa.html')\n\ndef iso_27701(request):\n    return render(request, 'website/iso_27701.html')\n\ndef gdpr(request):\n    return render(request, 'website/gdpr.html')\n\ndef soc2(request):\n    return render(request, 'website/soc2.html')\n\ndef dpdp(request):\n    return render(request, 'website/dpdp.html')\n\ndef iso_27017(request):\n    return render(request, 'website/iso_27017.html')\n\ndef iso_27018(request):\n    return render(request, 'website/iso_27018.html')\n\ndef it_general_control_audit(request):\n    return render(request, 'website/it_general_control_audit.html')\n\ndef third_party_vendor_audit(request):\n    return render(request, 'website/third_party_vendor_audit.html')\n\n# Cybersecurity Operations subsections\ndef network_architecture_review(request):\n    return render(request, 'website/network_architecture_review.html')\n\ndef brand_exploitation(request):\n    return render(request, 'website/brand_exploitation.html')\n\n# Training & Awareness subsections\ndef phishing_simulation(request):\n    return render(request, 'website/phishing_simulation.html')\n\ndef employee_awareness_training(request):\n    return render(request, 'website/employee_awareness_training.html')\n\n# Additional Cyber Defense subsection views\ndef api_security_assessment(request):\n    return render(request, 'website/api_security_assessment.html')\n\ndef wireless_device_security(request):\n    return render(request, 'website/wireless_device_security.html')\n\ndef cloud_security_testing(request):\n    return render(request, 'website/cloud_security_testing.html')\n\ndef source_code_review(request):\n    return render(request, 'website/source_code_review.html')\n\ndef ot_iot_security(request):\n    return render(request, 'website/ot_iot_security.html')\n\n# Additional Governance, Risk & Compliance subsection views\ndef iso_27701(request):\n    return render(request, 'website/iso_27701.html')\n\ndef gdpr(request):\n    return render(request, 'website/gdpr.html')\n\ndef soc2(request):\n    return render(request, 'website/soc2.html')\n\ndef dpdp(request):\n    return render(request, 'website/dpdp.html')\n\ndef iso_27017(request):\n    return render(request, 'website/iso_27017.html')\n\ndef iso_27018(request):\n    return render(request, 'website/iso_27018.html')\n\ndef it_general_control_audit(request):\n    return render(request, 'website/it_general_control_audit.html')\n\ndef third_party_vendor_audit(request):\n    return render(request, 'website/third_party_vendor_audit.html')\n\n# Additional Cybersecurity Operations subsection view\ndef brand_exploitation(request):\n    return render(request, 'website/brand_exploitation.html')\n\ndef policygenerator(request):\n    return render(request, 'website/policygenerator.html')\n\n\ndef export_pdf(request):\n    # Create a file-like buffer to receive PDF data\n    buffer = BytesIO()\n    \n    # Create the PDF object, using the buffer as its \"file\"\n    p = canvas.Canvas(buffer)\n    \n    # Draw things on the PDF\n    p.drawString(100, 800, \"Asset Inventory Report\")\n    y = 750\n    # Add headers\n    p.drawString(100, y, \"Asset Name\")\n    p.drawString(250, y, \"Description\")\n    p.drawString(400, y, \"Status\")\n    y -= 20\n    \n    # Add sample data (replace with your actual data)\n    sample_data = [\n        [\"AMZN-EC2-Linux-App\", \"Server that is installed in project\", \"Running\"],\n        # Add more rows as needed\n    ]\n    \n    for row in sample_data:\n        p.drawString(100, y, row[0])\n        p.drawString(250, y, row[1])\n        p.drawString(400, y, row[2])\n        y -= 20\n    \n    # Close the PDF object cleanly\n    p.showPage()\n    p.save()\n    \n    # Get the value of the BytesIO buffer and return it\n    pdf = buffer.getvalue()\n    buffer.close()\n    response = HttpResponse(content_type='application/pdf')\n    response['Content-Disposition'] = 'attachment; filename=\"asset_inventory.pdf\"'\n    response.write(pdf)\n    return response\n\ndef export_excel(request):\n    response = HttpResponse(content_type='text/csv')\n    response['Content-Disposition'] = 'attachment; filename=\"asset_inventory.csv\"'\n    \n    writer = csv.writer(response)\n    writer.writerow(['Asset Name', 'Description', 'Status'])\n    \n    # Add sample data (replace with your actual data)\n    sample_data = [\n        ['AMZN-EC2-Linux-App', 'Server that is installed in project', 'Running'],\n        # Add more rows as needed\n    ]\n    \n    for row in sample_data:\n        writer.writerow(row)\n    \n    return response","size_bytes":8851},"static/css/main.css":{"content":"/* Base Styles */\nbody {\n    font-family: 'Inter', sans-serif;\n    background-color: #0f0f0f;\n    color: #f8fafc;\n}\n\n/* Custom Colors */\n:root {\n    --primary: #6e3691;\n    --primary-hover: #6e3691;\n    --secondary: #8b5cf6;\n}\n\n/* Common Components */\n.btn-primary {\n    background-color: var(--primary);\n    color: white;\n    padding: 0.75rem 2rem;\n    border-radius: 0.5rem;\n    font-weight: 500;\n    transition: all 0.3s;\n}\n\n.btn-primary:hover {\n    background-color: var(--primary-hover);\n    box-shadow: 0 0 20px rgba(99, 102, 241, 0.2);\n}\n\n.btn-secondary {\n    background-color: #1e293b;\n    color: white;\n    padding: 0.75rem 2rem;\n    border-radius: 0.5rem;\n    font-weight: 500;\n    border: 1px solid #334155;\n    transition: all 0.3s;\n}\n\n.btn-secondary:hover {\n    background-color: #0f0f0f;\n    box-shadow: 0 0 20px rgba(15, 23, 42, 0.2);\n}\n\n.card {\n    background-color: #1e293b;\n    border: 1px solid #334155;\n    border-radius: 0.75rem;\n    padding: 2rem;\n    transition: all 0.3s;\n}\n\n.card:hover {\n    border-color: rgba(99, 102, 241, 0.5);\n    box-shadow: 0 0 20px rgba(99, 102, 241, 0.1);\n}\n\n.text-gradient {\n\n    background: linear-gradient(to right, #6366f1, #8b5cf6);\n    background-clip: text;\n    -webkit-background-clip: text;\n    -webkit-text-fill-color: transparent;\n}\n\n.bg-gradient-cyber {\n    background: linear-gradient(135deg, #1e293b, #0f0f0f);\n}\n\n.bg-cyber-pattern {\n    background-image: radial-gradient(#334155 1px, transparent 1px);\n    background-size: 20px 20px;\n}\n\n/* Navigation */\n.nav-link {\n    color: #94a3b8;\n    transition: color 0.3s;\n}\n\n.nav-link:hover {\n    color: white;\n}\n\n/* Form Elements */\n.form-input {\n    background-color: #0f0f0f;\n    border: 1px solid #334155;\n    border-radius: 0.5rem;\n    padding: 0.75rem 1rem;\n    color: white;\n    width: 100%;\n}\n\n.form-input:focus {\n    border-color: var(--primary);\n    box-shadow: 0 0 0 2px rgba(99, 102, 241, 0.2);\n    outline: none;\n}\n\n/* Animations */\n.animate-float {\n    animation: float 6s ease-in-out infinite;\n}\n\n@keyframes float {\n    0%, 100% {\n        transform: translateY(0);\n    }\n    50% {\n        transform: translateY(-20px);\n    }\n}\n\n/* Compliance Template Custom Styles */\n.compliance-card {\n    transition: box-shadow 0.2s;\n}\n.compliance-card:hover {\n    box-shadow: 0 8px 32px 0 rgba(150,85,189,0.25);\n    border-color: #6e3691;\n}\n\n\n\n","size_bytes":2353},"static/css/style.css":{"content":"/* Add styles here */\n:root {\n    --primary-color: #0a192f;\n    --secondary-color: #172a45;\n    --accent-color: #8A2BE2;  /* Changed to vibrant purple */\n    --accent-color-alt: #B23AFC;  /* Changed to lighter purple */\n    --text-color: #e6f1ff;\n    --text-color-secondary: #8892b0;\n    --danger-color: #ff4757;\n    --warning-color: #ffa502;\n    --success-color: #a228c6;\n    --glass-bg: rgba(23, 42, 69, 0.7);\n    --glass-border: rgba(255, 255, 255, 0.1);\n    --glass-shadow: 0 8px 32px 0 rgba(0, 0, 0, 0.37);\n    --neon-glow: 0 0 10px rgba(173, 14, 205, 0.5), 0 0 20px rgba(0, 247, 255, 0.3), 0 0 30px rgba(0, 247, 255, 0.1);\n    --neon-glow-green: 0 0 10px rgba(251, 0, 255, 0.5), 0 0 20px rgba(0, 255, 157, 0.3), 0 0 30px rgba(0, 255, 157, 0.1);\n}\n\n* {\n    margin: 0;\n    padding: 0;\n    box-sizing: border-box;\n    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n}\n\nbody {\n    background-color: var(--primary-color);\n    color: var(--text-color);\n    position: relative;\n    min-height: 100vh;\n    line-height: 1.6;\n    overflow-x: hidden;\n}\n\n.cyber-background {\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    z-index: -1;\n    background-color: var(--primary-color);\n    background-image: \n        radial-gradient(circle at 20% 30%, rgba(0, 247, 255, 0.05) 0%, transparent 20%),\n        radial-gradient(circle at 80% 70%, rgba(0, 255, 157, 0.05) 0%, transparent 20%);\n    overflow: hidden;\n}\n\n.cyber-background::before {\n    content: '';\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background: linear-gradient(to bottom, transparent, var(--secondary-color));\n    animation: pulse 8s infinite alternate;\n}\n\n.cyber-background::after {\n    content: '';\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background-image: \n        url(\"data:image/svg+xml,%3Csvg width='100' height='100' viewBox='0 0 100 100' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath d='M11 18c3.866 0 7-3.134 7-7s-3.134-7-7-7-7 3.134-7 7 3.134 7 7 7zm48 25c3.866 0 7-3.134 7-7s-3.134-7-7-7-7 3.134-7 7 3.134 7 7 7zm-43-7c1.657 0 3-1.343 3-3s-1.343-3-3-3-3 1.343-3 3 1.343 3 3 3zm63 31c1.657 0 3-1.343 3-3s-1.343-3-3-3-3 1.343-3 3 1.343 3 3 3zM34 90c1.657 0 3-1.343 3-3s-1.343-3-3-3-3 1.343-3 3 1.343 3 3 3zm56-76c1.657 0 3-1.343 3-3s-1.343-3-3-3-3 1.343-3 3 1.343 3 3 3zM12 86c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm28-65c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm23-11c2.76 0 5-2.24 5-5s-2.24-5-5-5-5 2.24-5 5 2.24 5 5 5zm-6 60c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm29 22c2.76 0 5-2.24 5-5s-2.24-5-5-5-5 2.24-5 5 2.24 5 5 5zM32 63c2.76 0 5-2.24 5-5s-2.24-5-5-5-5 2.24-5 5 2.24 5 5 5zm57-13c2.76 0 5-2.24 5-5s-2.24-5-5-5-5 2.24-5 5 2.24 5 5 5zm-9-21c1.105 0 2-.895 2-2s-.895-2-2-2-2 .895-2 2 .895 2 2 2zM60 91c1.105 0 2-.895 2-2s-.895-2-2-2-2 .895-2 2 .895 2 2 2zM35 41c1.105 0 2-.895 2-2s-.895-2-2-2-2 .895-2 2 .895 2 2 2zM12 60c1.105 0 2-.895 2-2s-.895-2-2-2-2 .895-2 2 .895 2 2 2z' fill='%2300f7ff' fill-opacity='0.05' fill-rule='evenodd'/%3E%3C/svg%3E\"),\n        url(\"data:image/svg+xml,%3Csvg width='60' height='60' viewBox='0 0 60 60' xmlns='http://www.w3.org/2000/svg'%3E%3Cg fill='none' fill-rule='evenodd'%3E%3Cg fill='%2300ff9d' fill-opacity='0.05'%3E%3Cpath d='M36 34v-4h-2v4h-4v2h4v4h2v-4h4v-2h-4zm0-30V0h-2v4h-4v2h4v4h2V6h4V4h-4zM6 34v-4H4v4H0v2h4v4h2V6h4V4H6zM6 4V0H4v4H0v2h4v4h2V6h4V4H6z'/%3E%3C/g%3E%3C/g%3E%3C/svg%3E\");\n    opacity: 0.5;\n    animation: float 120s linear infinite;\n}\n\n@keyframes pulse {\n    0% {\n        opacity: 0.3;\n    }\n    100% {\n        opacity: 0.7;\n    }\n}\n\n@keyframes float {\n    0% {\n        background-position: 0 0;\n    }\n    100% {\n        background-position: 1000px 1000px;\n    }\n}\n\n.scanner-container {\n    max-width: 1200px;\n    margin: 0 auto;\n    padding: 40px 20px;\n    position: relative;\n    z-index: 1;\n}\n\n.scanner-header {\n    text-align: center;\n    margin-bottom: 40px;\n}\n\n.scanner-header h1 {\n    font-size: 3rem;\n    margin-bottom: 10px;\n    background: linear-gradient(to right, var(--accent-color), var(--accent-color-alt));\n    -webkit-background-clip: text;\n    background-clip: text;\n    color: transparent;\n    text-shadow: var(--neon-glow);\n    letter-spacing: 1px;\n}\n\n.scanner-header p {\n    font-size: 1.2rem;\n    color: var(--text-color-secondary);\n}\n\n.glassmorphism {\n    background: var(--glass-bg);\n    backdrop-filter: blur(10px);\n    -webkit-backdrop-filter: blur(10px);\n    border: 1px solid var(--glass-border);\n    border-radius: 15px;\n    box-shadow: var(--glass-shadow);\n    transition: all 0.3s ease;\n}\n\n.glassmorphism:hover {\n    box-shadow: var(--neon-glow);\n    transform: translateY(-5px);\n}\n\n.scanner-form {\n    display: flex;\n    flex-wrap: wrap;\n    padding: 30px;\n    margin-bottom: 40px;\n}\n\n.form-content {\n    flex: 1;\n    min-width: 300px;\n}\n\n.scanner-form h2 {\n    font-size: 2rem;\n    margin-bottom: 15px;\n    color: var(--accent-color);\n}\n\n.scanner-form p {\n    margin-bottom: 25px;\n    color: var(--text-color-secondary);\n}\n\n.url-input-container {\n    display: flex;\n    flex-wrap: wrap;\n    gap: 15px;\n    margin-top: 20px;\n}\n\n.url-input {\n    flex: 1;\n    min-width: 250px;\n    padding: 15px 20px;\n    border-radius: 8px;\n    border: 1px solid var(--accent-color);\n    background-color: rgba(10, 25, 47, 0.8);\n    color: var(--text-color);\n    font-size: 1rem;\n    box-shadow: 0 0 5px rgba(0, 247, 255, 0.3);\n    transition: all 0.3s ease;\n}\n\n.url-input:focus {\n    outline: none;\n    box-shadow: var(--neon-glow);\n}\n\n.scan-button {\n    padding: 15px 25px;\n    border: none;\n    border-radius: 8px;\n    background: linear-gradient(45deg, var(--accent-color), var(--accent-color-alt));\n    color: var(--primary-color);\n    font-weight: bold;\n    font-size: 1rem;\n    cursor: pointer;\n    display: flex;\n    align-items: center;\n    gap: 10px;\n    transition: all 0.3s ease;\n    box-shadow: 0 0 10px rgba(0, 247, 255, 0.5);\n    width: 100%;\n}\n\n.scan-button:hover {\n    transform: translateY(-2px);\n    box-shadow: var(--neon-glow);\n}\n\n.scanner-graphic {\n    flex: 1;\n    min-width: 300px;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n}\n\n.scanning-progress {\n    padding: 30px;\n    margin-bottom: 40px;\n    text-align: center;\n}\n\n.scanning-progress h2 {\n    font-size: 1.8rem;\n    margin-bottom: 20px;\n    color: var(--accent-color);\n}\n\n.progress-container {\n    margin: 30px 0;\n}\n\n.progress-bar {\n    height: 10px;\n    background-color: rgba(255, 255, 255, 0.1);\n    border-radius: 5px;\n    overflow: hidden;\n    margin-bottom: 10px;\n}\n\n.progress-fill {\n    height: 100%;\n    width: 0%;\n    background: linear-gradient(to right, var(--accent-color), var(--accent-color-alt));\n    border-radius: 5px;\n    transition: width 0.5s ease;\n    box-shadow: var(--neon-glow);\n}\n\n.progress-percentage {\n    font-size: 1.2rem;\n    font-weight: bold;\n    color: var(--accent-color);\n}\n\n.scan-status {\n    margin: 20px 0;\n}\n\n.scan-status p {\n    font-size: 1.1rem;\n    color: var(--text-color-secondary);\n}\n\n.scan-results {\n    margin-top: 40px;\n}\n\n.results-header {\n    text-align: center;\n    font-size: 2.2rem;\n    margin-bottom: 30px;\n    color: var(--accent-color);\n}\n\n.results-summary {\n    display: flex;\n    flex-wrap: wrap;\n    padding: 30px;\n    margin-bottom: 40px;\n    align-items: center;\n}\n\n.summary-score {\n    flex: 1;\n    min-width: 200px;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    padding: 20px;\n}\n\n.score-circle {\n    width: 120px;\n    height: 120px;\n    border-radius: 50%;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    background: linear-gradient(45deg, var(--accent-color), var(--accent-color-alt));\n    box-shadow: var(--neon-glow);\n    margin-bottom: 15px;\n}\n\n.score-circle span {\n    font-size: 2.5rem;\n    font-weight: bold;\n    color: var(--primary-color);\n}\n\n.summary-score p {\n    font-size: 1.2rem;\n    color: var(--text-color);\n}\n\n.summary-stats {\n    flex: 2;\n    min-width: 300px;\n    display: grid;\n    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\n    gap: 20px;\n    padding: 20px;\n}\n\n.stat-item {\n    display: flex;\n    align-items: center;\n    gap: 10px;\n    font-size: 1.1rem;\n}\n\n.passed {\n    color: var(--success-color);\n    text-shadow: 0 0 10px rgba(46, 213, 115, 0.5);\n}\n\n.warning {\n    color: var(--warning-color);\n    text-shadow: 0 0 10px rgba(255, 165, 2, 0.5);\n}\n\n.failed {\n    color: var(--danger-color);\n    text-shadow: 0 0 10px rgba(255, 71, 87, 0.5);\n}\n\n.results-details {\n    display: grid;\n    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));\n    gap: 30px;\n    margin-bottom: 40px;\n}\n\n.result-card {\n    padding: 0;\n    overflow: hidden;\n    transition: transform 0.3s ease, box-shadow 0.3s ease;\n}\n\n.result-card:hover {\n    transform: translateY(-5px);\n}\n\n.card-header {\n    padding: 20px;\n    display: flex;\n    align-items: center;\n    gap: 15px;\n    background-color: rgba(10, 25, 47, 0.8);\n    border-bottom: 1px solid var(--glass-border);\n}\n\n.card-header i {\n    font-size: 1.5rem;\n    color: var(--accent-color);\n}\n\n.card-header h3 {\n    flex: 1;\n    font-size: 1.3rem;\n}\n\n.status-badge {\n    padding: 5px 10px;\n    border-radius: 20px;\n    font-size: 0.8rem;\n    font-weight: bold;\n}\n\n.status-badge.passed {\n    background-color: rgba(46, 213, 115, 0.2);\n    border: 1px solid var(--success-color);\n}\n\n.status-badge.warning {\n    background-color: rgba(255, 165, 2, 0.2);\n    border: 1px solid var(--warning-color);\n}\n\n.status-badge.failed {\n    background-color: rgba(255, 71, 87, 0.2);\n    border: 1px solid var(--danger-color);\n}\n\n.card-content {\n    padding: 20px;\n}\n\n.details-list {\n    margin: 15px 0;\n}\n\n.detail-item {\n    display: flex;\n    justify-content: space-between;\n    margin-bottom: 10px;\n    padding-bottom: 10px;\n    border-bottom: 1px solid var(--glass-border);\n}\n\n.detail-item:last-child {\n    border-bottom: none;\n}\n\n.detail-label {\n    color: var(--text-color-secondary);\n}\n\n.recommendation {\n    margin-top: 20px;\n    padding-top: 20px;\n    border-top: 1px solid var(--glass-border);\n}\n\n.recommendation h4 {\n    color: var(--accent-color);\n    margin-bottom: 10px;\n}\n\n.code-example {\n    background-color: rgba(10, 25, 47, 0.8);\n    padding: 15px;\n    border-radius: 5px;\n    margin-top: 15px;\n    overflow-x: auto;\n}\n\n.code-example pre {\n    font-family: 'Courier New', Courier, monospace;\n    color: var(--accent-color);\n}\n\n.action-buttons {\n    display: flex;\n    justify-content: center;\n    gap: 20px;\n    margin-top: 40px;\n}\n\n.action-button {\n    padding: 15px 25px;\n    border: none;\n    border-radius: 8px;\n    font-weight: bold;\n    font-size: 1rem;\n    cursor: pointer;\n    display: flex;\n    align-items: center;\n    gap: 10px;\n    transition: all 0.3s ease;\n}\n\n.download-report {\n    background-color: var(--secondary-color);\n    color: var(--accent-color);\n    border: 1px solid var(--accent-color);\n    box-shadow: 0 0 5px rgba(0, 247, 255, 0.3);\n}\n\n.download-report:hover {\n    box-shadow: var(--neon-glow);\n    transform: translateY(-2px);\n}\n\n.new-scan {\n    background: linear-gradient(45deg, var(--accent-color), var(--accent-color-alt));\n    color: var(--primary-color);\n    box-shadow: 0 0 5px rgba(0, 247, 255, 0.3);\n}\n\n.new-scan:hover {\n    box-shadow: var(--neon-glow);\n    transform: translateY(-2px);\n}\n\n.hidden {\n    display: none;\n}\n\n@media (max-width: 768px) {\n    .scanner-header h1 {\n        font-size: 2.5rem;\n    }\n    \n    .scanner-form, .results-summary {\n        flex-direction: column;\n    }\n    \n    .scanner-graphic {\n        margin-top: 30px;\n    }\n    \n    .summary-score {\n        margin-bottom: 30px;\n    }\n    \n    .action-buttons {\n        flex-direction: column;\n        align-items: center;\n    }\n    \n    .action-button {\n        width: 100%;\n        justify-content: center;\n    }\n}\n\n@media (max-width: 480px) {\n    .scanner-header h1 {\n        font-size: 2rem;\n    }\n    \n    .scanner-header p {\n        font-size: 1rem;\n    }\n    \n    .scanner-form h2 {\n        font-size: 1.5rem;\n    }\n    \n    .url-input, .scan-button {\n        width: 100%;\n    }\n}\n\n/* Matrix Code Rain Animation */\n.matrix-code {\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    z-index: -1;\n    pointer-events: none;\n}\n\n.matrix-code canvas {\n    width: 100%;\n    height: 100%;\n}\n\n@keyframes blink {\n    0%, 100% { opacity: 1; }\n    50% { opacity: 0.3; }\n}\n\n.cyber-alert {\n    animation: blink 2s infinite;\n}\n\n/* Scanning Laser Animation */\n.scanning-laser {\n    position: absolute;\n    height: 2px;\n    background: linear-gradient(to right, transparent, var(--accent-color), transparent);\n    width: 100%;\n    top: 0;\n    left: 0;\n    opacity: 0.7;\n    box-shadow: 0 0 8px var(--accent-color);\n    animation: scan-animation 3s ease-in-out infinite;\n    pointer-events: none;\n}\n\n@keyframes scan-animation {\n    0% { top: 0; opacity: 0; }\n    5% { opacity: 0.7; }\n    95% { opacity: 0.7; }\n    100% { top: 100%; opacity: 0; }\n}\n\n/* Data Breach Animation */\n@keyframes data-breach {\n    0% { transform: translateY(0) scale(1); opacity: 1; }\n    100% { transform: translateY(-20px) scale(0.8); opacity: 0; }\n}\n\n.data-breach-particle {\n    position: absolute;\n    font-family: 'Courier New', monospace;\n    color: var(--accent-color);\n    font-size: 12px;\n    pointer-events: none;\n    animation: data-breach 1.5s ease-out forwards;\n}\n\n/* Shield Pulse Animation */\n@keyframes shield-pulse {\n    0% { transform: scale(1); opacity: 0.8; }\n    50% { transform: scale(1.2); opacity: 0.4; }\n    100% { transform: scale(1); opacity: 0.8; }\n}\n\n.shield-pulse {\n    position: absolute;\n    width: 100%;\n    height: 100%;\n    border-radius: 50%;\n    background: radial-gradient(circle, var(--accent-color) 0%, transparent 70%);\n    opacity: 0;\n    pointer-events: none;\n}\n\n/* Notification System */\n.notification {\n    position: fixed;\n    bottom: 20px;\n    right: 20px;\n    padding: 15px 20px;\n    border-radius: 8px;\n    display: flex;\n    align-items: center;\n    gap: 10px;\n    z-index: 1000;\n    transform: translateY(100px);\n    opacity: 0;\n    transition: all 0.3s ease;\n    box-shadow: var(--glass-shadow);\n}\n\n.notification.show {\n    transform: translateY(0);\n    opacity: 1;\n}\n\n.notification.success {\n    background-color: rgba(46, 213, 115, 0.2);\n    border: 1px solid var(--success-color);\n    color: var(--success-color);\n}\n\n.notification.info {\n    background-color: rgba(0, 247, 255, 0.2);\n    border: 1px solid var(--accent-color);\n    color: var(--accent-color);\n}\n\n.notification.error {\n    background-color: rgba(255, 71, 87, 0.2);\n    border: 1px solid var(--danger-color);\n    color: var(--danger-color);\n}\n\n.notification i {\n    font-size: 1.2rem;\n}\n\n/* Button glow effect */\n.glow-effect {\n    box-shadow: var(--neon-glow) !important;\n}\n","size_bytes":14843},"static/js/main.js":{"content":"// Matrix code rain animation\ndocument.addEventListener('DOMContentLoaded', function() {\n  // Matrix code animation\n  const canvas = document.createElement('canvas');\n  const ctx = canvas.getContext('2d');\n  const matrixContainer = document.querySelector('.matrix-code');\n  \n  matrixContainer.appendChild(canvas);\n  \n  // Set canvas dimensions\n  function setCanvasDimensions() {\n      canvas.width = window.innerWidth;\n      canvas.height = window.innerHeight;\n  }\n  \n  setCanvasDimensions();\n  window.addEventListener('resize', setCanvasDimensions);\n  \n  // Matrix characters\n  const characters = 'アイウエオカキクケコサシスセソタチツテトナニヌネノハヒフヘホマミムメモヤユヨラリルレロワヲン0123456789';\n  const charArray = characters.split('');\n  \n  // Column setup\n  const fontSize = 14;\n  const columns = Math.floor(canvas.width / fontSize);\n  \n  // Drops - one per column\n  const drops = [];\n  for (let i = 0; i < columns; i++) {\n      drops[i] = Math.random() * -100;\n  }\n  \n  // Drawing the characters\n  function draw() {\n      // Black semi-transparent background to create fade effect\n      ctx.fillStyle = 'rgba(10, 25, 47, 0.05)';\n      ctx.fillRect(0, 0, canvas.width, canvas.height);\n      \n      ctx.fillStyle = '#00f7ff';\n      ctx.font = fontSize + 'px monospace';\n      \n      // Loop through drops\n      for (let i = 0; i < drops.length; i++) {\n          // Random character\n          const text = charArray[Math.floor(Math.random() * charArray.length)];\n          \n          // x = i * fontSize, y = value of drops[i]\n          ctx.fillText(text, i * fontSize, drops[i] * fontSize);\n          \n          // Sending the drop back to the top randomly after it crosses the screen\n          if (drops[i] * fontSize > canvas.height && Math.random() > 0.975) {\n              drops[i] = 0;\n          }\n          \n          // Incrementing Y coordinate\n          drops[i]++;\n      }\n  }\n  \n  setInterval(draw, 35);\n\n  // Typing effect for header\n  const headerText = document.querySelector('.scanner-header h1');\n  const originalText = headerText.textContent;\n  headerText.textContent = '';\n  \n  let i = 0;\n  const typeWriter = () => {\n      if (i < originalText.length) {\n          headerText.textContent += originalText.charAt(i);\n          i++;\n          setTimeout(typeWriter, 150);\n      } else {\n          // Add blinking cursor at the end\n          headerText.classList.add('typing-complete');\n      }\n  };\n  \n  setTimeout(typeWriter, 1000);\n\n  // Floating animation for cards\n  const cards = document.querySelectorAll('.glassmorphism');\n  cards.forEach((card, index) => {\n      card.style.animation = `float-card 4s ease-in-out ${index * 0.2}s infinite alternate`;\n  });\n\n  // Scan button effect\n  const scanButton = document.getElementById('scan-button');\n  if (scanButton) {\n      scanButton.addEventListener('click', function() {\n          // Hide the form and show progress\n          document.querySelector('.scanner-form').classList.add('hidden');\n          document.getElementById('scanning-progress').classList.remove('hidden');\n          \n          // Animate progress bar\n          const progressFill = document.querySelector('.progress-fill');\n          const progressPercentage = document.querySelector('.progress-percentage');\n          const scanStatus = document.getElementById('current-scan-status');\n          \n          const statuses = [\n              \"Initializing scan...\",\n              \"Checking SSL configuration...\",\n              \"Scanning for vulnerabilities...\",\n              \"Analyzing HTTP headers...\",\n              \"Checking for malware...\",\n              \"Verifying security protocols...\",\n              \"Generating report...\"\n          ];\n          \n          let progress = 0;\n          const interval = setInterval(() => {\n              progress += 1;\n              progressFill.style.width = `${progress}%`;\n              progressPercentage.textContent = `${progress}%`;\n              \n              // Update status text at certain points\n              if (progress % 15 === 0 && progress < 90) {\n                  scanStatus.textContent = statuses[Math.floor(progress / 15)];\n              }\n              \n              if (progress >= 100) {\n                  clearInterval(interval);\n                  setTimeout(() => {\n                      document.getElementById('scanning-progress').classList.add('hidden');\n                      document.getElementById('scan-results').classList.remove('hidden');\n                      \n                      // Add data breach animation\n                      createDataBreachEffect();\n                  }, 500);\n              }\n          }, 50);\n      });\n  }\n\n  // Data breach animation\n  function createDataBreachEffect() {\n      const resultsContainer = document.getElementById('scan-results');\n      const characters = '01010101010101010101';\n      \n      for (let i = 0; i < 20; i++) {\n          setTimeout(() => {\n              const particle = document.createElement('div');\n              particle.className = 'data-breach-particle';\n              particle.style.left = `${Math.random() * 100}%`;\n              particle.style.top = `${Math.random() * 100}%`;\n              particle.textContent = characters.charAt(Math.floor(Math.random() * characters.length));\n              \n              resultsContainer.appendChild(particle);\n              \n              // Remove particle after animation completes\n              setTimeout(() => {\n                  particle.remove();\n              }, 1500);\n          }, i * 100);\n      }\n  }\n\n  // Add shield pulse animation to security score\n  const scoreCircle = document.querySelector('.score-circle');\n  if (scoreCircle) {\n      const shieldPulse = document.createElement('div');\n      shieldPulse.className = 'shield-pulse';\n      scoreCircle.appendChild(shieldPulse);\n      \n      setInterval(() => {\n          shieldPulse.style.animation = 'none';\n          void shieldPulse.offsetWidth; // Trigger reflow\n          shieldPulse.style.animation = 'shield-pulse 2s ease-in-out';\n      }, 2000);\n  }\n\n  // Add hover glow effect to all buttons\n  const buttons = document.querySelectorAll('button');\n  buttons.forEach(button => {\n      button.addEventListener('mouseenter', function() {\n          this.classList.add('glow-effect');\n      });\n      \n      button.addEventListener('mouseleave', function() {\n          this.classList.remove('glow-effect');\n      });\n  });\n  \n  // Add functionality to action buttons\n  document.addEventListener('DOMContentLoaded', function() {\n      // Download Report Button\n      const downloadReportBtn = document.querySelector('button:has(i.fas.fa-download)');\n      if (downloadReportBtn) {\n          downloadReportBtn.addEventListener('click', function() {\n              // Create a sample report content\n              const reportContent = `Security Scan Report\n              Date: ${new Date().toLocaleString()}\n              \n              Summary:\n              - Critical Issues: 2\n              - Warnings: 5\n              - Passed Checks: 18\n              \n              Detailed Analysis:\n              1. Critical Issues:\n                 - Outdated SSL/TLS Configuration\n                 - Vulnerable Dependencies\n              \n              2. Warnings:\n                 - Missing Security Headers\n                 - Insecure Cookie Settings\n                 - Cross-Origin Resource Sharing Misconfiguration\n                 - Weak Password Policy\n                 - Information Disclosure\n              \n              3. Passed Checks:\n                 - Firewall Configuration\n                 - DDoS Protection\n                 - Input Validation\n                 - XSS Protection\n                 - SQL Injection Protection\n                 - and 13 more...\n              \n              Recommendations:\n              1. Update SSL/TLS configuration to latest version\n              2. Update vulnerable dependencies\n              3. Implement security headers\n              4. Configure secure cookie settings\n              5. Review CORS policy`;\n  \n              // Create a blob and download link\n              const blob = new Blob([reportContent], { type: 'text/plain' });\n              const url = window.URL.createObjectURL(blob);\n              const a = document.createElement('a');\n              a.href = url;\n              a.download = 'security-scan-report.txt';\n              document.body.appendChild(a);\n              a.click();\n              window.URL.revokeObjectURL(url);\n              document.body.removeChild(a);\n          });\n      }\n  \n      // Start New Scan Button\n      const newScanBtn = document.querySelector('button:has(i.fas.fa-redo)');\n      if (newScanBtn) {\n          newScanBtn.addEventListener('click', function() {\n              // Reset form fields\n              document.getElementById('website-url').value = '';\n              document.getElementById('email-url').value = '';\n  \n              // Hide results and show initial form\n              document.getElementById('scan-results').classList.add('hidden');\n              document.querySelector('.scanner-form').parentElement.classList.remove('hidden');\n              document.getElementById('scanning-progress').classList.add('hidden');\n  \n              // Reset progress steps\n              document.querySelectorAll('.scan-step').forEach(step => {\n                  step.classList.remove('active', 'completed');\n              });\n  \n              // Reset first step to active\n              const firstStep = document.querySelector('.scan-step');\n              if (firstStep) {\n                  firstStep.classList.add('active');\n              }\n          });\n      }\n  });\n  // Add functionality for Download Report and Start New Scan buttons\n  document.addEventListener('DOMContentLoaded', function() {\n  // Download Report Button\n  const downloadReportBtn = document.querySelector('button:has(.fa-download)');\n  if (downloadReportBtn) {\n  downloadReportBtn.addEventListener('click', function() {\n  // Create report content\n  const reportContent = `Web Security Scan Report\n  ==========================================\n  Date: ${new Date().toLocaleString()}\n  \n  Summary:\n  ---------\n  • Critical Issues Found: 2\n  • Warnings Detected: 5\n  • Passed Security Checks: 18\n  \n  Detailed Analysis:\n  -----------------\n  1. Critical Issues:\n     - Outdated SSL/TLS Configuration\n     - Cross-Site Scripting (XSS) Vulnerability\n  \n  2. Warnings:\n     - Missing HTTP Security Headers\n     - Insecure Cookie Configuration\n     - Directory Listing Enabled\n     - Outdated JavaScript Libraries\n     - Missing Content Security Policy\n  \n  3. Passed Checks:\n     - Firewall Configuration\n     - SQL Injection Protection\n     - CSRF Protection\n     - Password Policy\n     - Brute Force Protection\n     - And 13 more...\n  \n  Recommendations:\n  ---------------\n  1. Update SSL/TLS configuration to latest secure version\n  2. Implement proper input validation and sanitization\n  3. Configure security headers\n  4. Update JavaScript dependencies\n  5. Implement Content Security Policy\n  \n  Generated by Aphelion Cyber Security Scanner\n  ==========================================`;\n  \n  // Create blob and download\n  const blob = new Blob([reportContent], { type: 'text/plain' });\n  const url = window.URL.createObjectURL(blob);\n  const a = document.createElement('a');\n  a.href = url;\n  a.download = 'security-scan-report.txt';\n  document.body.appendChild(a);\n  a.click();\n  window.URL.revokeObjectURL(url);\n  document.body.removeChild(a);\n  });\n  }\n  \n  // Start New Scan Button\n  const startNewScanBtn = document.querySelector('button:has(.fa-redo)');\n  if (startNewScanBtn) {\n  startNewScanBtn.addEventListener('click', function() {\n  // Reset form fields\n  const websiteUrlInput = document.getElementById('website-url');\n  const emailInput = document.getElementById('email-url');\n  if (websiteUrlInput) websiteUrlInput.value = '';\n  if (emailInput) emailInput.value = '';\n  \n  // Hide results section\n  const resultsSection = document.getElementById('scan-results');\n  if (resultsSection) resultsSection.classList.add('hidden');\n  \n  // Show initial form\n  const scannerForm = document.querySelector('.scanner-form');\n  if (scannerForm) scannerForm.classList.remove('hidden');\n  \n  // Reset progress steps\n  const scanSteps = document.querySelectorAll('.scan-step');\n  scanSteps.forEach(step => {\n  step.classList.remove('active', 'completed');\n  });\n  if (scanSteps[0]) scanSteps[0].classList.add('active');\n  });\n  }\n  });\n  const downloadReportBtn = document.querySelector('.download-report');\n  const newScanBtn = document.querySelector('.new-scan');\n  \n  if (downloadReportBtn) {\n      downloadReportBtn.addEventListener('click', function() {\n          // Generate and download the report\n          generateReport();\n      });\n  }\n  \n  if (newScanBtn) {\n      newScanBtn.addEventListener('click', function() {\n          // Reset the form and show the initial scan form\n          resetScan();\n      });\n  }\n});\n\n// Function to generate and download the report\nfunction generateReport() {\n  // Get the scan results\n  const scanResults = document.getElementById('scan-results');\n  const securityScore = document.getElementById('security-score').textContent;\n  const websiteUrl = document.getElementById('website-url').value;\n  const date = new Date().toLocaleDateString();\n  \n  // Create report content\n  let reportContent = `\n  ===== APHELION SECURITY SCAN REPORT =====\n  \n  Website: ${websiteUrl}\n  Date: ${date}\n  Security Score: ${securityScore}/100\n  \n  === SUMMARY ===\n  `;\n  \n  // Add summary items\n  const summaryItems = document.querySelectorAll('.stat-item');\n  summaryItems.forEach(item => {\n      const status = item.querySelector('i').classList.contains('passed') ? 'PASSED' : \n                    item.querySelector('i').classList.contains('warning') ? 'WARNING' : 'FAILED';\n      const name = item.querySelector('span').textContent;\n      reportContent += `\\n${name}: ${status}`;\n  });\n  \n  // Add detailed results\n  reportContent += `\\n\\n=== DETAILED RESULTS ===`;\n  \n  const resultCards = document.querySelectorAll('.result-card');\n  resultCards.forEach(card => {\n      const title = card.querySelector('h3').textContent;\n      const status = card.querySelector('.status-badge').textContent;\n      const description = card.querySelector('.card-content p').textContent;\n      \n      reportContent += `\\n\\n${title} - ${status}\\n${description}`;\n      \n      // Add recommendations if any\n      const recommendation = card.querySelector('.recommendation p');\n      if (recommendation) {\n          reportContent += `\\nRecommendation: ${recommendation.textContent}`;\n      }\n  });\n  \n  reportContent += `\\n\\n===== END OF REPORT =====`;\n  \n  // Create a blob and download\n  const blob = new Blob([reportContent], { type: 'text/plain' });\n  const url = URL.createObjectURL(blob);\n  const a = document.createElement('a');\n  a.href = url;\n  a.download = `aphelion_security_report_${date.replace(/\\//g, '-')}.txt`;\n  document.body.appendChild(a);\n  a.click();\n  document.body.removeChild(a);\n  URL.revokeObjectURL(url);\n  \n  // Show a success message\n  showNotification('Report downloaded successfully!', 'success');\n}\n\n// Function to reset the scan\nfunction resetScan() {\n  // Hide results and progress\n  document.getElementById('scan-results').classList.add('hidden');\n  document.getElementById('scanning-progress').classList.add('hidden');\n  \n  // Show the form\n  document.querySelector('.scanner-form').classList.remove('hidden');\n  \n  // Clear the input field\n  document.getElementById('website-url').value = '';\n  \n  // Reset progress bar\n  document.querySelector('.progress-fill').style.width = '0%';\n  document.querySelector('.progress-percentage').textContent = '0%';\n  document.getElementById('current-scan-status').textContent = 'Initializing scan...';\n  \n  // Show a notification\n  showNotification('Ready for a new scan!', 'info');\n}\n\n// Function to show notifications\nfunction showNotification(message, type) {\n  // Create notification element\n  const notification = document.createElement('div');\n  notification.className = `notification ${type}`;\n  notification.innerHTML = `\n      <i class=\"fas ${type === 'success' ? 'fa-check-circle' : 'fa-info-circle'}\"></i>\n      <span>${message}</span>\n  `;\n  \n  // Add to document\n  document.body.appendChild(notification);\n  \n  // Animate in\n  setTimeout(() => {\n      notification.classList.add('show');\n  }, 10);\n  \n  // Remove after delay\n  setTimeout(() => {\n      notification.classList.remove('show');\n      setTimeout(() => {\n          document.body.removeChild(notification);\n      }, 300);\n  }, 3000);\n}\nconst form = document.getElementById(\"myForm\");\n\n  form.addEventListener(\"submit\", function (e) {\n    e.preventDefault(); // Prevents form from submitting\n\n    const formData = new FormData(form);\n    const webhookUrl = 'http://n8n.jaiminsomani.live:5678/webhook-test/start-sca';\n\n\n    const targetUrl = formData.get(\"website-url\");\n    const emailAddress = formData.get(\"email-url\");\n\n    async function submitForm() {\n        const formData = {\n            'Landing Page Url': targetUrl,\n            'Email': emailAddress\n        };\n    \n        try {\n            const response = await fetch(webhookUrl, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify(formData)\n            });\n    \n            if (response.ok) {\n                console.log('URL sent successfully!');\n                const data = await response.json();\n                console.log('Response:', data);\n            } else {\n                console.error(`HTTP error! status: ${response.status}`);\n            }\n        } catch (error) {\n            console.error('Error submitting form:', error);\n        }\n    }\n    \n    submitForm();\n\n\n\n    fetch(\"http://n8n.jaiminsomani.live:5678/webhook-test/new-node\")\n    .then(response => response.json())\n    .then(data => {\n      // Update security score\n      document.getElementById(\"security-score\").textContent = data.score;\n\n      // Update Malware Check\n      updateStatus(\"malware\", data.malware);\n\n      // Update SSL Certificate\n      updateStatus(\"ssl\", data.ssl_certificate);\n\n      // Update HTTPS Redirect\n      updateStatus(\"https\", data.https_redirect);\n\n      // Update Content Security\n      updateStatus(\"csp\", data.content_security);\n\n      // Update scanned file count\n      document.querySelector(\"#malware-files-scanned\").textContent = data.files_scanned;\n    })\n    .catch(error => {\n      console.error(\"Error fetching data:\", error);\n    });\n\n  function updateStatus(type, status) {\n    const map = {\n      \"PASSED\": { icon: \"fas fa-check-circle\", class: \"passed\" },\n      \"FAILED\": { icon: \"fas fa-times-circle\", class: \"failed\" },\n      \"WARNING\": { icon: \"fas fa-exclamation-triangle\", class: \"warning\" }\n    };\n\n    const el = document.getElementById(`${type}-status`);\n    if (el && map[status]) {\n      el.className = `${map[status].icon} ${map[status].class}`;\n      el.nextElementSibling.textContent = {\n        ssl: \"SSL Certificate\",\n        malware: \"No Malware\",\n        https: \"HTTPS Redirect\",\n        csp: \"Content Security\"\n      }[type];\n    }\n\n    const badge = document.getElementById(`${type}-badge`);\n    if (badge) badge.textContent = status;\n  }\n  });\n\n// Web Scanner Functionality\ndocument.addEventListener('DOMContentLoaded', function() {\n    const scanButton = document.getElementById('scan-button');\n    const scanningProgress = document.getElementById('scanning-progress');\n    const scanResults = document.getElementById('scan-results');\n    const scanSteps = document.querySelectorAll('.scan-step');\n    let currentStep = 0;\n\n    if (scanButton) {\n        scanButton.addEventListener('click', function() {\n            const websiteUrl = document.getElementById('website-url').value;\n            const emailUrl = document.getElementById('email-url').value;\n\n            if (!websiteUrl || !emailUrl) {\n                alert('Please fill in both Website URL and Email fields');\n                return;\n            }\n\n            // Show scanning progress\n            scanningProgress.classList.remove('hidden');\n            scanResults.classList.add('hidden');\n\n            // Reset steps\n            scanSteps.forEach(step => {\n                step.classList.remove('active');\n                const progressBar = step.querySelector('.progress-fill');\n                if (progressBar) progressBar.style.width = '0%';\n            });\n\n            // Start scanning animation\n            currentStep = 0;\n            scanSteps[currentStep].classList.add('active');\n            progressScan();\n        });\n    }\n\n    function progressScan() {\n        if (currentStep >= scanSteps.length) {\n            // Scanning complete, show results\n            setTimeout(() => {\n                scanningProgress.classList.add('hidden');\n                scanResults.classList.remove('hidden');\n            }, 1000);\n            return;\n        }\n\n        const step = scanSteps[currentStep];\n        const progressBar = step.querySelector('.progress-fill');\n\n        if (progressBar) {\n            let width = 0;\n            const interval = setInterval(() => {\n                if (width >= 100) {\n                    clearInterval(interval);\n                    step.classList.remove('active');\n                    currentStep++;\n                    if (currentStep < scanSteps.length) {\n                        scanSteps[currentStep].classList.add('active');\n                    }\n                    setTimeout(progressScan, 500);\n                } else {\n                    width += 2;\n                    progressBar.style.width = width + '%';\n                }\n            }, 50);\n        } else {\n            setTimeout(() => {\n                step.classList.remove('active');\n                currentStep++;\n                if (currentStep < scanSteps.length) {\n                    scanSteps[currentStep].classList.add('active');\n                }\n                progressScan();\n            }, 2000);\n        }\n    }\n});\n\n\n  ","size_bytes":22229},"aphelioncyber/blog/management/__init__.py":{"content":"\n","size_bytes":1},"aphelioncyber/blog/migrations/0001_initial.py":{"content":"# Generated by Django 5.2.4 on 2025-08-28 07:09\n\nimport django.db.models.deletion\nimport wagtail.fields\nfrom django.conf import settings\nfrom django.db import migrations, models\n\n\nclass Migration(migrations.Migration):\n\n    initial = True\n\n    dependencies = [\n        ('wagtailcore', '0094_alter_page_locale'),\n        ('wagtailimages', '0027_image_description'),\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n\n    operations = [\n        migrations.CreateModel(\n            name='BlogIndexPage',\n            fields=[\n                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.page')),\n                ('intro', wagtail.fields.RichTextField(blank=True)),\n            ],\n            options={\n                'abstract': False,\n            },\n            bases=('wagtailcore.page',),\n        ),\n        migrations.CreateModel(\n            name='WebinarIndexPage',\n            fields=[\n                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.page')),\n                ('intro', wagtail.fields.RichTextField(blank=True)),\n            ],\n            options={\n                'abstract': False,\n            },\n            bases=('wagtailcore.page',),\n        ),\n        migrations.CreateModel(\n            name='BlogPage',\n            fields=[\n                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.page')),\n                ('date', models.DateTimeField(verbose_name='Post date')),\n                ('intro', models.CharField(max_length=250)),\n                ('body', wagtail.fields.RichTextField(blank=True)),\n                ('tags', models.CharField(blank=True, help_text='Comma-separated tags', max_length=200)),\n                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='blog_posts', to=settings.AUTH_USER_MODEL)),\n                ('featured_image', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailimages.image')),\n            ],\n            options={\n                'abstract': False,\n            },\n            bases=('wagtailcore.page',),\n        ),\n        migrations.CreateModel(\n            name='WebinarPage',\n            fields=[\n                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.page')),\n                ('date', models.DateTimeField(verbose_name='Event date')),\n                ('intro', models.CharField(max_length=250)),\n                ('description', wagtail.fields.RichTextField(blank=True)),\n                ('registration_link', models.URLField(blank=True, help_text='Link for webinar registration')),\n                ('status', models.CharField(choices=[('upcoming', 'Upcoming'), ('live', 'Live Now'), ('completed', 'Completed')], default='upcoming', max_length=20)),\n                ('duration_minutes', models.PositiveIntegerField(default=60, help_text='Duration in minutes')),\n                ('max_attendees', models.PositiveIntegerField(blank=True, null=True)),\n                ('tags', models.CharField(blank=True, help_text='Comma-separated tags', max_length=200)),\n                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='webinar_posts', to=settings.AUTH_USER_MODEL)),\n                ('featured_image', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailimages.image')),\n            ],\n            options={\n                'abstract': False,\n            },\n            bases=('wagtailcore.page',),\n        ),\n    ]\n","size_bytes":4008},"aphelioncyber/blog/migrations/__init__.py":{"content":"","size_bytes":0},"aphelioncyber/blog/management/commands/__init__.py":{"content":"\n","size_bytes":1},"aphelioncyber/blog/management/commands/setup_wagtail.py":{"content":"\nfrom django.core.management.base import BaseCommand\nfrom django.contrib.auth.models import User, Group, Permission\nfrom wagtail.models import Site, Page\nfrom aphelioncyber.blog.models import BlogIndexPage, WebinarIndexPage\n\n\nclass Command(BaseCommand):\n    help = 'Set up Wagtail CMS with initial blog and webinar pages'\n\n    def handle(self, *args, **options):\n        # Create user groups with permissions\n        admin_group, created = Group.objects.get_or_create(name='Blog Administrators')\n        moderator_group, created = Group.objects.get_or_create(name='Content Moderators')\n        author_group, created = Group.objects.get_or_create(name='Content Authors')\n\n        # Assign permissions\n        blog_permissions = Permission.objects.filter(\n            content_type__app_label='blog'\n        )\n        \n        admin_group.permissions.set(blog_permissions)\n        moderator_group.permissions.set(blog_permissions.filter(\n            codename__in=['change_blogpage', 'change_webinarpage', 'view_blogpage', 'view_webinarpage']\n        ))\n        author_group.permissions.set(blog_permissions.filter(\n            codename__in=['add_blogpage', 'add_webinarpage', 'change_blogpage', 'change_webinarpage']\n        ))\n\n        # Get or create root page\n        root_page = Page.objects.filter(depth=1).first()\n        if not root_page:\n            self.stdout.write(\"No root page found. Please run wagtail migrations first.\")\n            return\n\n        # Create blog index page\n        blog_index, created = BlogIndexPage.objects.get_or_create(\n            title='Blog',\n            defaults={\n                'intro': 'Stay up-to-date with the latest cybersecurity insights and best practices.',\n                'slug': 'blog',\n            }\n        )\n        if created:\n            root_page.add_child(instance=blog_index)\n            self.stdout.write(f\"Created blog index page: {blog_index.title}\")\n\n        # Create webinar index page\n        webinar_index, created = WebinarIndexPage.objects.get_or_create(\n            title='Webinars',\n            defaults={\n                'intro': 'Join our expert-led webinars and events to enhance your cybersecurity knowledge.',\n                'slug': 'webinars',\n            }\n        )\n        if created:\n            root_page.add_child(instance=webinar_index)\n            self.stdout.write(f\"Created webinar index page: {webinar_index.title}\")\n\n        # Update site settings\n        site = Site.objects.get(is_default_site=True)\n        if site.root_page != root_page:\n            site.root_page = root_page\n            site.save()\n\n        self.stdout.write(\n            self.style.SUCCESS('Successfully set up Wagtail CMS with blog and webinar functionality!')\n        )\n        self.stdout.write('Access the Wagtail admin at /cms/ to start creating content.')\n","size_bytes":2824}},"version":1}